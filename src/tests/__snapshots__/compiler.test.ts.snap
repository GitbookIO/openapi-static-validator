// Bun Snapshot v1, https://goo.gl/fbAQLP

exports[`components ref 1`] = `
"/** 
Validate a request against the OpenAPI spec
@param {{ method: string; path: string; body?: any; query: Record<string, string | string[]>; headers: Record<string, string>; }} request - Input request to validate
@param {{ stringFormats?: { [format: string]: (value: string, path: string[]) => ValidationError | null } }} [context] - Context object to pass to validation functions
@returns {{ operationId?: string; params: Record<string, string>; query: Record<string, string | string[]>; body?: any; headers: Record<string, string>; }}
*/
export function validateRequest(request, context) {
    return new RequestError(404, 'no operation match path');
}
/** 
Map of all components defined in the spec to their validation functions.
{Object.<string, <T>(path: string[], value: T, context: any) => (T | ValidationError)>}
*/
export const componentSchemas = {
    'A': obj0,
    'B': obj1
};
export class RequestError extends Error {
    /** @param {number} code HTTP code for the error
@param {string} message The error message*/
    constructor(code, message) {
        super(message);
        /** @type {number} HTTP code for the error*/
        this.code = code;
    }
}
export class ValidationError extends RequestError {
    /** @param {string[]} path The path that failed validation
@param {string} message The error message*/
    constructor(path, message) {
        super(409, message);
        /** @type {string[]} The path that failed validation*/
        this.path = path;
    }
}
function obj0(path, value, context) {
    if (typeof value === 'string') {
        value = Number(value);
    }
    if (typeof value !== 'number' || Number.isNaN(value)) {
        return new ValidationError(path, 'expected a number');
    }
    return value;
}
function obj2(path, value, context) {
    if (typeof value !== 'string') {
        return new ValidationError(path, 'expected a string');
    }
    return value;
}
function obj1(path, value, context) {
    if (typeof value !== 'object' || value === null) {
        return new ValidationError(path, 'expected an object');
    }
    const keys = new Set(Object.keys(value));
    const value0 = value['foo'];
    if (value0 !== undefined) {
        const result0 = obj2([
            ...path,
            'foo'
        ], value0, context);
        if (result0 instanceof ValidationError) {
            return result0;
        }
        value['foo'] = result0;
        keys.delete('foo');
    }
    const value1 = value['bar'];
    if (value1 !== undefined) {
        const result1 = obj0([
            ...path,
            'bar'
        ], value1, context);
        if (result1 instanceof ValidationError) {
            return result1;
        }
        value['bar'] = result1;
        keys.delete('bar');
    }
    return value;
}"
`;

exports[`recursive refs 1`] = `
"/** 
Validate a request against the OpenAPI spec
@param {{ method: string; path: string; body?: any; query: Record<string, string | string[]>; headers: Record<string, string>; }} request - Input request to validate
@param {{ stringFormats?: { [format: string]: (value: string, path: string[]) => ValidationError | null } }} [context] - Context object to pass to validation functions
@returns {{ operationId?: string; params: Record<string, string>; query: Record<string, string | string[]>; body?: any; headers: Record<string, string>; }}
*/
export function validateRequest(request, context) {
    return new RequestError(404, 'no operation match path');
}
/** 
Map of all components defined in the spec to their validation functions.
{Object.<string, <T>(path: string[], value: T, context: any) => (T | ValidationError)>}
*/
export const componentSchemas = {
    'A': obj0,
    'B': obj1
};
export class RequestError extends Error {
    /** @param {number} code HTTP code for the error
@param {string} message The error message*/
    constructor(code, message) {
        super(message);
        /** @type {number} HTTP code for the error*/
        this.code = code;
    }
}
export class ValidationError extends RequestError {
    /** @param {string[]} path The path that failed validation
@param {string} message The error message*/
    constructor(path, message) {
        super(409, message);
        /** @type {string[]} The path that failed validation*/
        this.path = path;
    }
}
function obj0(path, value, context) {
    if (typeof value === 'string') {
        value = Number(value);
    }
    if (typeof value !== 'number' || Number.isNaN(value)) {
        return new ValidationError(path, 'expected a number');
    }
    return value;
}
function obj2(path, value, context) {
    if (typeof value !== 'string') {
        return new ValidationError(path, 'expected a string');
    }
    return value;
}
function obj1(path, value, context) {
    if (typeof value !== 'object' || value === null) {
        return new ValidationError(path, 'expected an object');
    }
    const keys = new Set(Object.keys(value));
    const value0 = value['foo'];
    if (value0 !== undefined) {
        const result0 = obj2([
            ...path,
            'foo'
        ], value0, context);
        if (result0 instanceof ValidationError) {
            return result0;
        }
        value['foo'] = result0;
        keys.delete('foo');
    }
    const value1 = value['bar'];
    if (value1 !== undefined) {
        const result1 = obj0([
            ...path,
            'bar'
        ], value1, context);
        if (result1 instanceof ValidationError) {
            return result1;
        }
        value['bar'] = result1;
        keys.delete('bar');
    }
    const value2 = value['rec'];
    if (value2 !== undefined) {
        const result2 = obj1([
            ...path,
            'rec'
        ], value2, context);
        if (result2 instanceof ValidationError) {
            return result2;
        }
        value['rec'] = result2;
        keys.delete('rec');
    }
    return value;
}"
`;
